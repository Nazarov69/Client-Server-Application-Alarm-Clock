/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project.unn.lab_java;

import com.google.gson.Gson;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author nniks
 */
public class ServerJFrame extends javax.swing.JFrame {
    Server server;
    JLabel label;
    Gson gson = new Gson();
    DBase base = new DBase();
    String reminder;
    String reminder2;
    /**
     * Creates new form JFrameServer
     */
    public ServerJFrame() {
        initComponents();
        jTextArea1.setEditable(false);
        my_time();
    }

    private void add_story_from_dbase(){
        server.story = base.get_story();  
    }
    
    public void my_time(){
        label = new JLabel("Текущее время " + serverJPanel1.time_string());
        label.setForeground(Color.BLACK);
        serverJPanel1.setLayout(new GridLayout(1, 1));
        serverJPanel1.add(label);
        add(serverJPanel1);
        Thread thread = new Thread(() ->{
            while(server == null){
                label.setText("<html>Текущее время " + serverJPanel1.time_string());
            }
            System.out.println("SERVER TIME START");
            
            while(server != null){
                        reminder = "";
                            reminder += server.prev_alarm.time_string();
//                            if(server.prev_alarm.get_hour() < 10){
//                                reminder += "0";
//                            }
//                            reminder += server.prev_alarm.get_hour() + ":";
//                            if(server.prev_alarm.get_minute() < 10){
//                                reminder += "0";
//                            }
//                            reminder += server.prev_alarm.get_minute() + ":";
//                            if(server.prev_alarm.get_second() < 10){
//                                reminder += "0";
//                            }
//                            reminder += server.prev_alarm.get_second() + " " + server.prev_alarm.get_description(); 
                            
                        reminder2 = "";
                        reminder2 += server.next_alarm.time_string();
//                            if(server.next_alarm.get_hour() < 10){
//                                reminder2 += "0";
//                            }
//                            reminder2 += server.next_alarm.get_hour() + ":";
//                            if(server.next_alarm.get_minute() < 10){
//                                reminder2 += "0";
//                            }
//                            reminder2 += server.next_alarm.get_minute() + ":";
//                            if(server.next_alarm.get_second() < 10){
//                                reminder2 += "0";
//                            }
//                            reminder2 += server.next_alarm.get_second() + " " + server.next_alarm.get_description(); 
                label.setText("<html>Текущее время " + server.time_string() + "<br>Последний будильник : <br>" + reminder + "<br>Следующий будильник : <br>" + reminder2 + "</html>");
                for(Client client : server.all_clients){
                    client.send_alarms_and_time(server.prev_alarm, server.next_alarm, server.get_time());
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }); 
      thread.start();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        serverJPanel1 = new project.unn.lab_java.ServerJPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        jButton1.setText("Начать выполнение");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Остановить выполение");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Поставить на паузу");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Продолжить выполнение");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Установить время");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton5.setText("Запустить сервер");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout serverJPanel1Layout = new javax.swing.GroupLayout(serverJPanel1);
        serverJPanel1.setLayout(serverJPanel1Layout);
        serverJPanel1Layout.setHorizontalGroup(
            serverJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 631, Short.MAX_VALUE)
        );
        serverJPanel1Layout.setVerticalGroup(
            serverJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 81, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(64, 64, 64)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 707, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(serverJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton6)
                                        .addGap(36, 36, 36)))))
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(262, 262, 262))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6))
                    .addComponent(serverJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(223, 223, 223))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if(server == null) { serverJPanel1.run(); }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      if(server == null) { serverJPanel1.stop(); }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       if(server == null) { serverJPanel1.pause(); }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
            if(server == null){
                server = new Server();
                try {
                    server.set_time(serverJPanel1.get_time());
                } catch (Exception ex) {
                    Logger.getLogger(ServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                serverJPanel1.stop();
                server.run();
                JOptionPane.showMessageDialog(this, "Сервер запущен");
                add_story_from_dbase();
                
                Thread thread = new Thread (() -> {
                    String input;
                    while(server.story.isEmpty()){ System.out.print("");}
                    while(true){
                        input = "";
                        for(Message ms : server.story){
                            input += ms.time_string();
//                                if(ms.get_hour() < 10){
//                                    input += "0";
//                                }
//                                input += ms.get_hour() + ":";
//                                if(ms.get_minute() < 10){
//                                    input += "0";
//                                }
//                                input += ms.get_minute() + ":";
//                                if(ms.get_second() < 10){
//                                    input += "0";
//                                }
//                                input += ms.get_second() + " " + ms.get_description() + "\n"; 
                        }
                        jTextArea1.setFont(new Font("Liberation Sans", Font.ROMAN_BASELINE, 16));
                        jTextArea1.setText(input);
                    }
                });
                thread.start();

                Thread thread2 = new Thread (() -> {
                    while(true){
                            server.set_next_time(3600*24);
                            server.set_prev_time(3600*24);
                            int[] server_time = server.get_time();
                            if(!server.story.isEmpty()){
                                for(Message m : server.story){
                                    if(server_time[0] * 3600 + server_time[1] * 60 + server_time[2] - m.get_hour() * 3600  - m.get_minute() * 60 - m.get_second()  < server.get_prev_time() &&
                                       server_time[0] * 3600 + server_time[1] * 60 + server_time[2] - m.get_hour() * 3600  - m.get_minute() * 60 - m.get_second() >= 0){
                                        server.prev_alarm.ID = m.get_ID();
                                        server.prev_alarm.hour = m.get_hour();
                                        server.prev_alarm.minute = m.get_minute();
                                        server.prev_alarm.second = m.get_second();
                                        server.set_prev_time(server_time[0] * 3600 + server_time[1] * 60 + server_time[2] - m.get_hour() * 3600  - m.get_minute() * 60 - m.get_second());
                                        server.prev_alarm.description = m.get_description();
                                    }
                                    if(m.get_hour() * 3600  + m.get_minute() * 60 + m.get_second() - server_time[0] * 3600 - server_time[1] * 60 - server_time[2] < server.get_next_time() &&
                                       m.get_hour() * 3600  + m.get_minute() * 60 + m.get_second() - server_time[0] * 3600 - server_time[1] * 60 - server_time[2] > 0){
                                        server.next_alarm.ID = m.get_ID();
                                        server.next_alarm.hour = m.get_hour();
                                        server.next_alarm.minute = m.get_minute();
                                        server.next_alarm.second = m.get_second();
                                        server.set_next_time(m.get_hour() * 3600  + m.get_minute() * 60 + m.get_second() - server_time[0] * 3600 - server_time[1] * 60 - server_time[2]);
                                        server.next_alarm.description = m.get_description();
                                    }
                                }
                                int l = server.prev_alarm.get_hour() * 3600 + server.prev_alarm.get_minute() * 60 + server.prev_alarm.get_second();
                                int r = server.get_hour() * 3600 + server.get_minute() * 60 + server.get_second();
                                if(l == r && r > 0){
                                    Message del = new Message();
                                    del.set_ID(server.prev_alarm.get_ID());
                                    del.set_hour(server.prev_alarm.get_hour());
                                    del.set_minute(server.prev_alarm.get_minute());
                                    del.set_second(server.prev_alarm.get_second());
                                    del.set_description(server.prev_alarm.get_description());
   
                                    server.del_alarm(del);
                                    add_story_from_dbase();
                                }
                            } else{
                                server.next_alarm.set_ID(0);
                                server.next_alarm.set_hour(0);
                                server.next_alarm.set_minute(0);
                                server.next_alarm.set_second(0);
                                server.next_alarm.set_description("");
                            }
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(ServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    });
                thread2.start();
            }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       if (server == null) { serverJPanel1.cont(); }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (server == null){
            try {
            serverJPanel1.set_time((int)jSpinner1.getValue(), (int)jSpinner2.getValue(), (int)jSpinner3.getValue());
            } catch (Exception ex) {
                Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTextArea jTextArea1;
    private project.unn.lab_java.ServerJPanel serverJPanel1;
    // End of variables declaration//GEN-END:variables
}
