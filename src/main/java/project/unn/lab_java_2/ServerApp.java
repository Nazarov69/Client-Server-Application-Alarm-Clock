/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project.unn.lab_java_2;

import com.google.gson.Gson;
import java.awt.Font;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;

/**
 *
 * @author nniks
 */
public class ServerApp extends javax.swing.JFrame {
    Server server;
    Gson gson = new Gson();
    SQL base = new SQL();
    
    /**
     * Creates new form JFrameServer
     */
    
    public ServerApp() {
        initComponents();
        jTextArea1.setEditable(false);
        server_start();
        my_time();
    }
    
    public void server_start(){
        if(server == null){
                server = new Server();
                server.run();
                server.story = base.get_story();  
                
                Thread thread = new Thread (() -> {
                    String input;
                    while(server.story.isEmpty()){ System.out.print("");}
                    while(true){
                        input = "";
                        for(OBJECT ms : server.story){
                            input += ms.time_string();
                        }
                        jTextArea1.setFont(new Font("Liberation Sans", Font.ROMAN_BASELINE, 16));
                        jTextArea1.setText(input);
                    }
                });
                thread.start();

                Thread thread2 = new Thread (() -> {
                    while(true){
                            server.set_next_time(3600*24);
                            int[] server_time = server.get_time();
                            if(!server.story.isEmpty()){
                                for(OBJECT m : server.story){
                                    if(m.get_hour() * 3600  + m.get_minute() * 60 + m.get_second() - server_time[0] * 3600 - server_time[1] * 60 - server_time[2] < server.get_next_time() &&
                                       m.get_hour() * 3600  + m.get_minute() * 60 + m.get_second() - server_time[0] * 3600 - server_time[1] * 60 - server_time[2] > 0){
                                        server.next_alarm.ID = m.get_ID();
                                        server.next_alarm.hour = m.get_hour();
                                        server.next_alarm.minute = m.get_minute();
                                        server.next_alarm.second = m.get_second();
                                        server.set_next_time(m.get_hour() * 3600  + m.get_minute() * 60 + m.get_second() - server_time[0] * 3600 - server_time[1] * 60 - server_time[2]);
                                        server.next_alarm.description = m.get_description();
                                    }
                                }
                            } else{
                                server.next_alarm.set_ID(0);
                                server.next_alarm.set_hour(0);
                                server.next_alarm.set_minute(0);
                                server.next_alarm.set_second(0);
                                server.next_alarm.set_description("");
                            }
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(OBJECT.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    });
                thread2.start();
            }
    }
    
    public void my_time(){
        SERVERTIME.setFont(new Font("Liberation Sans", Font.ROMAN_BASELINE, 32));
        SERVERTIME.setHorizontalAlignment(JTextField.CENTER);
        ALARMCLOCK.setFont(new Font("Liberation Sans", Font.ROMAN_BASELINE, 16));
        ALARMCLOCK.setHorizontalAlignment(JTextField.CENTER);
        Thread thread = new Thread(() ->{
            while(server != null){
                SERVERTIME.setText(server.time_string());
                ALARMCLOCK.setText(server.next_alarm.time_string());
                for(ServerClient client : server.all_clients){
                    client.send_alarm_and_time(server.next_alarm, server.get_time());
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ServerApp.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }); 
      thread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        SERVERTIME = new javax.swing.JLabel();
        ALARMCLOCK = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SERVERTIME, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
            .addComponent(ALARMCLOCK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SERVERTIME, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ALARMCLOCK, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ALARMCLOCK;
    private javax.swing.JLabel SERVERTIME;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
